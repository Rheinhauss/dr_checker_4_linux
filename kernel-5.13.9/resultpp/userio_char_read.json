{"all_contexts":[
{"num_warnings": 5,
"context":[{"lineno": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}],
"warnings":[{"warn_data": {"at_line": 163, "warn_str": "Loop is bounded by a tainted value.", "at": "if (count == 0)", "inst_trace": [{"instr_func": "userio_char_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "userio_char_read", "instr_loc": 123, "instr_file": "drivers/input/serio/userio.c", "instr": "{"}, {"instr_func": "userio_char_read", "instr_loc": 163, "instr_file": "drivers/input/serio/userio.c", "instr": "if (count == 0)"}, {"instr_func": "userio_char_read", "instr_loc": 163, "instr_file": "drivers/input/serio/userio.c", "instr": "if (count == 0)"}], "at_file": "drivers/input/serio/userio.c", "by": "TaintedLoopBoundDetector says:", "at_func": "userio_char_read"}, "warn_no": 1},
{"warn_data": {"at_line": 146, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "userio->tail = (userio->tail + copylen) %", "inst_trace": [{"instr_func": "userio_char_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "userio_char_read", "instr_loc": 123, "instr_file": "drivers/input/serio/userio.c", "instr": "{"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}], "at_file": "drivers/input/serio/userio.c", "by": "IntegerOverflowDetector says:", "at_func": "userio_char_read"}, "warn_no": 2},
{"warn_data": {"at_line": 140, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "nonwrap_len = CIRC_CNT_TO_END(userio->head,", "inst_trace": [{"instr_func": "userio_char_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "userio_char_read", "instr_loc": 123, "instr_file": "drivers/input/serio/userio.c", "instr": "{"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 140, "instr_file": "drivers/input/serio/userio.c", "instr": "nonwrap_len = CIRC_CNT_TO_END(userio->head,"}], "at_file": "drivers/input/serio/userio.c", "by": "IntegerOverflowDetector says:", "at_func": "userio_char_read"}, "warn_no": 3},
{"warn_data": {"at_line": 140, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "nonwrap_len = CIRC_CNT_TO_END(userio->head,", "inst_trace": [{"instr_func": "userio_char_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "userio_char_read", "instr_loc": 123, "instr_file": "drivers/input/serio/userio.c", "instr": "{"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 143, "instr_file": "drivers/input/serio/userio.c", "instr": "copylen = min(nonwrap_len, count);"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 146, "instr_file": "drivers/input/serio/userio.c", "instr": "userio->tail = (userio->tail + copylen) %"}, {"instr_func": "userio_char_read", "instr_loc": 140, "instr_file": "drivers/input/serio/userio.c", "instr": "nonwrap_len = CIRC_CNT_TO_END(userio->head,"}, {"instr_func": "userio_char_read", "instr_loc": 140, "instr_file": "drivers/input/serio/userio.c", "instr": "nonwrap_len = CIRC_CNT_TO_END(userio->head,"}, {"instr_func": "userio_char_read", "instr_loc": 140, "instr_file": "drivers/input/serio/userio.c", "instr": "nonwrap_len = CIRC_CNT_TO_END(userio->head,"}, {"instr_func": "userio_char_read", "instr_loc": 140, "instr_file": "drivers/input/serio/userio.c", "instr": "nonwrap_len = CIRC_CNT_TO_END(userio->head,"}], "at_file": "drivers/input/serio/userio.c", "by": "IntegerOverflowDetector says:", "at_func": "userio_char_read"}, "warn_no": 4},
{"warn_data": {"at_line": 173, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_to_user(user_buffer, buf, copylen))", "inst_trace": [], "at_file": "drivers/input/serio/userio.c", "by": "TaintedSizeDetector says:", "at_func": "userio_char_read"}, "warn_no": 5}]}]}