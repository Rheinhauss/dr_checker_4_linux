{"all_contexts":[
{"num_warnings": 6,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}],
"warnings":[{"warn_data": {"at_line": 1111, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "const void __user *codes_ptr;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_do_ioctl"}, "warn_no": 1},
{"warn_data": {"at_line": 1123, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_from_user(&i, p, sizeof(unsigned int)))", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_do_ioctl"}, "warn_no": 2},
{"warn_data": {"at_line": 1099, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "void __user *codes_ptr;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_do_ioctl"}, "warn_no": 3},
{"warn_data": {"at_line": 1050, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_to_user(p, &dev->id, sizeof(struct input_id)))", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_do_ioctl"}, "warn_no": 4},
{"warn_data": {"at_line": 1229, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_from_user(&abs, p, min_t(size_t,", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_do_ioctl"}, "warn_no": 5},
{"warn_data": {"at_line": 1212, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_to_user(p, &abs, min_t(size_t,", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_do_ioctl"}, "warn_no": 6}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1138, "file": "drivers/input/evdev.c", "instr": "return evdev_handle_set_keycode_v2(dev, p);"}],
"warnings":[{"warn_data": {"at_line": 861, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "{", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_handle_set_keycode_v2"}, "warn_no": 1}]},
{"num_warnings": 2,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1135, "file": "drivers/input/evdev.c", "instr": "return evdev_handle_get_keycode_v2(dev, p);"}],
"warnings":[{"warn_data": {"at_line": 826, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "{", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_handle_get_keycode_v2"}, "warn_no": 1},
{"warn_data": {"at_line": 837, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_to_user(p, &ke, sizeof(ke)))", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_handle_get_keycode_v2"}, "warn_no": 2}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1132, "file": "drivers/input/evdev.c", "instr": "return evdev_handle_set_keycode(dev, p);"}],
"warnings":[{"warn_data": {"at_line": 844, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "{", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_handle_set_keycode"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1129, "file": "drivers/input/evdev.c", "instr": "return evdev_handle_get_keycode(dev, p);"}],
"warnings":[{"warn_data": {"at_line": 803, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "{", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "evdev_handle_get_keycode"}, "warn_no": 1}]},
{"num_warnings": 3,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1117, "file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}],
"warnings":[{"warn_data": {"at_line": 974, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);", "inst_trace": [{"instr_func": "evdev_do_ioctl", "instr_loc": 1111, "instr_file": "drivers/input/evdev.c", "instr": "const void __user *codes_ptr;"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1118, "instr_file": "drivers/input/evdev.c", "instr": "mask.type, codes_ptr, mask.codes_size,"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1117, "instr_file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"instr_func": "evdev_set_mask", "instr_loc": 960, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 57, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}], "at_file": "drivers/input/evdev.c", "by": "IntegerOverflowDetector says:", "at_func": "evdev_set_mask"}, "warn_no": 1},
{"warn_data": {"at_line": 982, "warn_str": "Trying to write to a user pointer.", "at": "client->evmasks[type] = mask;", "inst_trace": [{"instr_func": "evdev_do_ioctl", "instr_loc": 1111, "instr_file": "drivers/input/evdev.c", "instr": "const void __user *codes_ptr;"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1118, "instr_file": "drivers/input/evdev.c", "instr": "mask.type, codes_ptr, mask.codes_size,"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1117, "instr_file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"instr_func": "evdev_set_mask", "instr_loc": 960, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_set_mask", "instr_loc": 982, "instr_file": "drivers/input/evdev.c", "instr": "client->evmasks[type] = mask;"}, {"instr_func": "evdev_set_mask", "instr_loc": 982, "instr_file": "drivers/input/evdev.c", "instr": "client->evmasks[type] = mask;"}], "at_file": "drivers/input/evdev.c", "by": "TaintedPointerDereferenceChecker says:", "at_func": "evdev_set_mask"}, "warn_no": 2},
{"warn_data": {"at_line": 981, "warn_str": "Trying to read from a user pointer.", "at": "oldmask = client->evmasks[type];", "inst_trace": [{"instr_func": "evdev_do_ioctl", "instr_loc": 1111, "instr_file": "drivers/input/evdev.c", "instr": "const void __user *codes_ptr;"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1118, "instr_file": "drivers/input/evdev.c", "instr": "mask.type, codes_ptr, mask.codes_size,"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1117, "instr_file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"instr_func": "evdev_set_mask", "instr_loc": 960, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_set_mask", "instr_loc": 981, "instr_file": "drivers/input/evdev.c", "instr": "oldmask = client->evmasks[type];"}, {"instr_func": "evdev_set_mask", "instr_loc": 981, "instr_file": "drivers/input/evdev.c", "instr": "oldmask = client->evmasks[type];"}], "at_file": "drivers/input/evdev.c", "by": "TaintedPointerDereferenceChecker says:", "at_func": "evdev_set_mask"}, "warn_no": 3}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1117, "file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"lineno": 966, "file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}],
"warnings":[{"warn_data": {"at_line": 71, "warn_str": "Trying to read from a user pointer.", "at": "return (type < EV_CNT) ? counts[type] : 0;", "inst_trace": [{"instr_func": "evdev_do_ioctl", "instr_loc": 1111, "instr_file": "drivers/input/evdev.c", "instr": "const void __user *codes_ptr;"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1118, "instr_file": "drivers/input/evdev.c", "instr": "mask.type, codes_ptr, mask.codes_size,"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1117, "instr_file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"instr_func": "evdev_set_mask", "instr_loc": 960, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 57, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}], "at_file": "drivers/input/evdev.c", "by": "TaintedPointerDereferenceChecker says:", "at_func": "evdev_get_mask_cnt"}, "warn_no": 1}]},
{"num_warnings": 5,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1117, "file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"lineno": 974, "file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}],
"warnings":[{"warn_data": {"at_line": 724, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);", "inst_trace": [{"instr_func": "evdev_do_ioctl", "instr_loc": 1111, "instr_file": "drivers/input/evdev.c", "instr": "const void __user *codes_ptr;"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1118, "instr_file": "drivers/input/evdev.c", "instr": "mask.type, codes_ptr, mask.codes_size,"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1117, "instr_file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"instr_func": "evdev_set_mask", "instr_loc": 960, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 57, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "bits_from_user", "instr_loc": 717, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "bits_from_user", "instr_loc": 724, "instr_file": "drivers/input/evdev.c", "instr": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);"}], "at_file": "drivers/input/evdev.c", "by": "IntegerOverflowDetector says:", "at_func": "bits_from_user"}, "warn_no": 1},
{"warn_data": {"at_line": 724, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);", "inst_trace": [{"instr_func": "evdev_do_ioctl", "instr_loc": 1111, "instr_file": "drivers/input/evdev.c", "instr": "const void __user *codes_ptr;"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1118, "instr_file": "drivers/input/evdev.c", "instr": "mask.type, codes_ptr, mask.codes_size,"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1117, "instr_file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"instr_func": "evdev_set_mask", "instr_loc": 960, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 57, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "bits_from_user", "instr_loc": 717, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "bits_from_user", "instr_loc": 724, "instr_file": "drivers/input/evdev.c", "instr": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);"}, {"instr_func": "bits_from_user", "instr_loc": 724, "instr_file": "drivers/input/evdev.c", "instr": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);"}], "at_file": "drivers/input/evdev.c", "by": "IntegerOverflowDetector says:", "at_func": "bits_from_user"}, "warn_no": 2},
{"warn_data": {"at_line": 724, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);", "inst_trace": [{"instr_func": "evdev_do_ioctl", "instr_loc": 1111, "instr_file": "drivers/input/evdev.c", "instr": "const void __user *codes_ptr;"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1118, "instr_file": "drivers/input/evdev.c", "instr": "mask.type, codes_ptr, mask.codes_size,"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1117, "instr_file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"instr_func": "evdev_set_mask", "instr_loc": 960, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 57, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "bits_from_user", "instr_loc": 717, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "bits_from_user", "instr_loc": 724, "instr_file": "drivers/input/evdev.c", "instr": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);"}], "at_file": "drivers/input/evdev.c", "by": "IntegerOverflowDetector says:", "at_func": "bits_from_user"}, "warn_no": 3},
{"warn_data": {"at_line": 724, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);", "inst_trace": [{"instr_func": "evdev_do_ioctl", "instr_loc": 1111, "instr_file": "drivers/input/evdev.c", "instr": "const void __user *codes_ptr;"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1118, "instr_file": "drivers/input/evdev.c", "instr": "mask.type, codes_ptr, mask.codes_size,"}, {"instr_func": "evdev_do_ioctl", "instr_loc": 1117, "instr_file": "drivers/input/evdev.c", "instr": "return evdev_set_mask(client,"}, {"instr_func": "evdev_set_mask", "instr_loc": 960, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 57, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_get_mask_cnt", "instr_loc": 71, "instr_file": "drivers/input/evdev.c", "instr": "return (type < EV_CNT) ? counts[type] : 0;"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 966, "instr_file": "drivers/input/evdev.c", "instr": "cnt = evdev_get_mask_cnt(type);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "evdev_set_mask", "instr_loc": 974, "instr_file": "drivers/input/evdev.c", "instr": "error = bits_from_user(mask, cnt - 1, codes_size, codes, compat);"}, {"instr_func": "bits_from_user", "instr_loc": 717, "instr_file": "drivers/input/evdev.c", "instr": "{"}, {"instr_func": "bits_from_user", "instr_loc": 724, "instr_file": "drivers/input/evdev.c", "instr": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);"}, {"instr_func": "bits_from_user", "instr_loc": 724, "instr_file": "drivers/input/evdev.c", "instr": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);"}, {"instr_func": "bits_from_user", "instr_loc": 724, "instr_file": "drivers/input/evdev.c", "instr": "len = compat ? BITS_TO_LONGS_COMPAT(maxbit) : BITS_TO_LONGS(maxbit);"}], "at_file": "drivers/input/evdev.c", "by": "IntegerOverflowDetector says:", "at_func": "bits_from_user"}, "warn_no": 4},
{"warn_data": {"at_line": 729, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_from_user(bits, p, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "bits_from_user"}, "warn_no": 5}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1105, "file": "drivers/input/evdev.c", "instr": "return evdev_get_mask(client,"}, {"lineno": 1010, "file": "drivers/input/evdev.c", "instr": "error = bits_to_user(mask, cnt - 1,"}],
"warnings":[{"warn_data": {"at_line": 712, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, bits, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "bits_to_user"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1177, "file": "drivers/input/evdev.c", "instr": "return str_to_user(dev->uniq, size, p);"}],
"warnings":[{"warn_data": {"at_line": 775, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, str, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "str_to_user"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1174, "file": "drivers/input/evdev.c", "instr": "return str_to_user(dev->phys, size, p);"}],
"warnings":[{"warn_data": {"at_line": 775, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, str, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "str_to_user"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1171, "file": "drivers/input/evdev.c", "instr": "return str_to_user(dev->name, size, p);"}],
"warnings":[{"warn_data": {"at_line": 775, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, str, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "str_to_user"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1167, "file": "drivers/input/evdev.c", "instr": "return evdev_handle_get_val(client, dev, EV_SW, dev->sw,"}, {"lineno": 910, "file": "drivers/input/evdev.c", "instr": "ret = bits_to_user(mem, maxbit, maxlen, p, compat);"}],
"warnings":[{"warn_data": {"at_line": 712, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, bits, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "bits_to_user"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1163, "file": "drivers/input/evdev.c", "instr": "return evdev_handle_get_val(client, dev, EV_SND, dev->snd,"}, {"lineno": 910, "file": "drivers/input/evdev.c", "instr": "ret = bits_to_user(mem, maxbit, maxlen, p, compat);"}],
"warnings":[{"warn_data": {"at_line": 712, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, bits, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "bits_to_user"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1159, "file": "drivers/input/evdev.c", "instr": "return evdev_handle_get_val(client, dev, EV_LED, dev->led,"}, {"lineno": 910, "file": "drivers/input/evdev.c", "instr": "ret = bits_to_user(mem, maxbit, maxlen, p, compat);"}],
"warnings":[{"warn_data": {"at_line": 712, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, bits, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "bits_to_user"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1155, "file": "drivers/input/evdev.c", "instr": "return evdev_handle_get_val(client, dev, EV_KEY, dev->key,"}, {"lineno": 910, "file": "drivers/input/evdev.c", "instr": "ret = bits_to_user(mem, maxbit, maxlen, p, compat);"}],
"warnings":[{"warn_data": {"at_line": 712, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, bits, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "bits_to_user"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1148, "file": "drivers/input/evdev.c", "instr": "return bits_to_user(dev->propbit, INPUT_PROP_MAX,"}],
"warnings":[{"warn_data": {"at_line": 712, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, bits, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "bits_to_user"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.file*, align 8"}, {"lineno": 1281, "file": "drivers/input/evdev.c", "instr": "return evdev_ioctl_handler(file, cmd, (void __user *)arg, 0);"}, {"lineno": 1272, "file": "drivers/input/evdev.c", "instr": "retval = evdev_do_ioctl(file, cmd, p, compat_mode);"}, {"lineno": 1200, "file": "drivers/input/evdev.c", "instr": "return handle_eviocgbit(dev,"}, {"lineno": 799, "file": "drivers/input/evdev.c", "instr": "return bits_to_user(bits, len, size, p, compat_mode);"}],
"warnings":[{"warn_data": {"at_line": 712, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "return copy_to_user(p, bits, len) ? -EFAULT : len;", "inst_trace": [], "at_file": "drivers/input/evdev.c", "by": "TaintedSizeDetector says:", "at_func": "bits_to_user"}, "warn_no": 1}]}]}