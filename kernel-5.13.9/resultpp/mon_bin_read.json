{"all_contexts":[
{"num_warnings": 12,
"context":[{"lineno": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}],
"warnings":[{"warn_data": {"at_line": 829, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "nbytes -= step_len;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 829, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "nbytes -= step_len;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 1},
{"warn_data": {"at_line": 825, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (step_len && copy_to_user(buf, ptr, step_len)) {", "inst_trace": [], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedSizeDetector says:", "at_func": "mon_bin_read"}, "warn_no": 2},
{"warn_data": {"at_line": 831, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "rp->b_read += step_len;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 3},
{"warn_data": {"at_line": 832, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "done += step_len;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 832, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "done += step_len;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 4},
{"warn_data": {"at_line": 837, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "step_len -= rp->b_read - hdrbytes;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 837, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len -= rp->b_read - hdrbytes;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 5},
{"warn_data": {"at_line": 837, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "step_len -= rp->b_read - hdrbytes;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 837, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len -= rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 837, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len -= rp->b_read - hdrbytes;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 6},
{"warn_data": {"at_line": 841, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "offset += rp->b_read - hdrbytes;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 7},
{"warn_data": {"at_line": 841, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "offset += rp->b_read - hdrbytes;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 8},
{"warn_data": {"at_line": 843, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "offset -= rp->b_size;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 843, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset -= rp->b_size;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 9},
{"warn_data": {"at_line": 848, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "nbytes -= step_len;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 848, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "nbytes -= step_len;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 10},
{"warn_data": {"at_line": 850, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "rp->b_read += step_len;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 829, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "nbytes -= step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 829, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "nbytes -= step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 829, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "nbytes -= step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 839, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = nbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 839, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = nbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 850, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 11},
{"warn_data": {"at_line": 851, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "done += step_len;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 851, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "done += step_len;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "mon_bin_read"}, "warn_no": 12}]},
{"num_warnings": 7,
"context":[{"lineno": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"lineno": 844, "file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}],
"warnings":[{"warn_data": {"at_line": 285, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "length -= step_len;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "copy_from_buf"}, "warn_no": 1},
{"warn_data": {"at_line": 283, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "if ((off += step_len) >= this->b_size) off = 0;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "copy_from_buf"}, "warn_no": 2},
{"warn_data": {"at_line": 268, "warn_str": "Loop is bounded by a tainted value.", "at": "while (length) {", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 839, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = nbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 839, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = nbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 268, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "while (length) {"}, {"instr_func": "copy_from_buf", "instr_loc": 268, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "while (length) {"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedLoopBoundDetector says:", "at_func": "copy_from_buf"}, "warn_no": 3},
{"warn_data": {"at_line": 280, "warn_str": "Trying to read from a user pointer.", "at": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedPointerDereferenceChecker says:", "at_func": "copy_from_buf"}, "warn_no": 4},
{"warn_data": {"at_line": 273, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "in_page = CHUNK_SIZE - (off & (CHUNK_SIZE-1));", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 823, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(nbytes, (size_t)(hdrbytes - rp->b_read));"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 831, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "rp->b_read += step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 841, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "offset += rp->b_read - hdrbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 273, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "in_page = CHUNK_SIZE - (off & (CHUNK_SIZE-1));"}, {"instr_func": "copy_from_buf", "instr_loc": 273, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "in_page = CHUNK_SIZE - (off & (CHUNK_SIZE-1));"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "copy_from_buf"}, "warn_no": 5},
{"warn_data": {"at_line": 281, "warn_str": "Loop is bounded by a tainted value.", "at": "if (copy_to_user(to, buf, step_len))", "inst_trace": [{"instr_func": "mon_bin_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "mon_bin_read", "instr_loc": 802, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_read", "instr_loc": 829, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "nbytes -= step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 829, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "nbytes -= step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 829, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "nbytes -= step_len;"}, {"instr_func": "mon_bin_read", "instr_loc": 839, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = nbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 839, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = nbytes;"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "mon_bin_read", "instr_loc": 844, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, buf, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 281, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_to_user(to, buf, step_len))"}, {"instr_func": "copy_from_buf", "instr_loc": 281, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_to_user(to, buf, step_len))"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 281, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_to_user(to, buf, step_len))"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedLoopBoundDetector says:", "at_func": "copy_from_buf"}, "warn_no": 6},
{"warn_data": {"at_line": 280, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;", "inst_trace": [], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedSizeDetector says:", "at_func": "copy_from_buf"}, "warn_no": 7}]}]}