{"all_contexts":[
{"num_warnings": 8,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}],
"warnings":[{"warn_data": {"at_line": 379, "warn_str": "Trying to use a global variable without locking.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_reg_ranges_read_file", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "GlobalVariableRaceDetector says:", "at_func": "regmap_reg_ranges_read_file"}, "warn_no": 1},
{"warn_data": {"at_line": 379, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_reg_ranges_read_file", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 363, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_reg_ranges_read_file"}, "warn_no": 2},
{"warn_data": {"at_line": 379, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_reg_ranges_read_file", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 363, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_reg_ranges_read_file"}, "warn_no": 3},
{"warn_data": {"at_line": 379, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_reg_ranges_read_file", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 363, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_reg_ranges_read_file"}, "warn_no": 4},
{"warn_data": {"at_line": 379, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_reg_ranges_read_file", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 363, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_reg_ranges_read_file"}, "warn_no": 5},
{"warn_data": {"at_line": 379, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_reg_ranges_read_file", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 363, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 379, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_reg_ranges_read_file"}, "warn_no": 6},
{"warn_data": {"at_line": 405, "warn_str": "Loop is bounded by a tainted value.", "at": "if (buf_pos + entry_len > count)", "inst_trace": [{"instr_func": "regmap_reg_ranges_read_file", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 363, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 405, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "if (buf_pos + entry_len > count)"}, {"instr_func": "regmap_reg_ranges_read_file", "instr_loc": 405, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "if (buf_pos + entry_len > count)"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "TaintedLoopBoundDetector says:", "at_func": "regmap_reg_ranges_read_file"}, "warn_no": 7},
{"warn_data": {"at_line": 412, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "mutex_unlock(&map->cache_lock);", "inst_trace": [], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "TaintedSizeDetector says:", "at_func": "regmap_reg_ranges_read_file"}, "warn_no": 8}]}]}