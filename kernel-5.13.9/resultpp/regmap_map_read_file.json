{"all_contexts":[
{"num_warnings": 10,
"context":[{"lineno": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"lineno": 289, "file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}],
"warnings":[{"warn_data": {"at_line": 232, "warn_str": "Trying to use a global variable without locking.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_map_read_file", "instr_loc": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"instr_func": "regmap_map_read_file", "instr_loc": 289, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "GlobalVariableRaceDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 1},
{"warn_data": {"at_line": 232, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_map_read_file", "instr_loc": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"instr_func": "regmap_map_read_file", "instr_loc": 286, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_map_read_file", "instr_loc": 290, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "count, ppos);"}, {"instr_func": "regmap_map_read_file", "instr_loc": 289, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 218, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 2},
{"warn_data": {"at_line": 232, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_map_read_file", "instr_loc": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"instr_func": "regmap_map_read_file", "instr_loc": 286, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_map_read_file", "instr_loc": 290, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "count, ppos);"}, {"instr_func": "regmap_map_read_file", "instr_loc": 289, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 218, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 3},
{"warn_data": {"at_line": 232, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_map_read_file", "instr_loc": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"instr_func": "regmap_map_read_file", "instr_loc": 286, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_map_read_file", "instr_loc": 290, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "count, ppos);"}, {"instr_func": "regmap_map_read_file", "instr_loc": 289, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 218, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 4},
{"warn_data": {"at_line": 232, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_map_read_file", "instr_loc": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"instr_func": "regmap_map_read_file", "instr_loc": 286, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_map_read_file", "instr_loc": 290, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "count, ppos);"}, {"instr_func": "regmap_map_read_file", "instr_loc": 289, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 218, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 5},
{"warn_data": {"at_line": 232, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL);", "inst_trace": [{"instr_func": "regmap_map_read_file", "instr_loc": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"instr_func": "regmap_map_read_file", "instr_loc": 286, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_map_read_file", "instr_loc": 290, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "count, ppos);"}, {"instr_func": "regmap_map_read_file", "instr_loc": 289, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 218, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 232, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "buf = kmalloc(count, GFP_KERNEL);"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 6},
{"warn_data": {"at_line": 258, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "snprintf(buf + buf_pos, count - buf_pos,", "inst_trace": [{"instr_func": "regmap_map_read_file", "instr_loc": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"instr_func": "regmap_map_read_file", "instr_loc": 286, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_map_read_file", "instr_loc": 290, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "count, ppos);"}, {"instr_func": "regmap_map_read_file", "instr_loc": 289, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 218, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 258, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "snprintf(buf + buf_pos, count - buf_pos,"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 7},
{"warn_data": {"at_line": 251, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "snprintf(buf + buf_pos, count - buf_pos, \"%.*x: \",", "inst_trace": [{"instr_func": "regmap_map_read_file", "instr_loc": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"instr_func": "regmap_map_read_file", "instr_loc": 286, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_map_read_file", "instr_loc": 290, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "count, ppos);"}, {"instr_func": "regmap_map_read_file", "instr_loc": 289, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 218, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 251, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "snprintf(buf + buf_pos, count - buf_pos, \"%.*x: \","}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "IntegerOverflowDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 8},
{"warn_data": {"at_line": 270, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "ret = buf_pos;", "inst_trace": [], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "TaintedSizeDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 9},
{"warn_data": {"at_line": 247, "warn_str": "Loop is bounded by a tainted value.", "at": "if (buf_pos + map->debugfs_tot_len > count)", "inst_trace": [{"instr_func": "regmap_map_read_file", "instr_loc": -1, "instr": "  %5 = alloca %struct.file*, align 8"}, {"instr_func": "regmap_map_read_file", "instr_loc": 286, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_map_read_file", "instr_loc": 290, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "count, ppos);"}, {"instr_func": "regmap_map_read_file", "instr_loc": 289, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "return regmap_read_debugfs(map, 0, map->max_register, user_buf,"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 218, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "{"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 247, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "if (buf_pos + map->debugfs_tot_len > count)"}, {"instr_func": "regmap_read_debugfs", "instr_loc": 247, "instr_file": "drivers/base/regmap/regmap-debugfs.c", "instr": "if (buf_pos + map->debugfs_tot_len > count)"}], "at_file": "drivers/base/regmap/regmap-debugfs.c", "by": "TaintedLoopBoundDetector says:", "at_func": "regmap_read_debugfs"}, "warn_no": 10}]}]}