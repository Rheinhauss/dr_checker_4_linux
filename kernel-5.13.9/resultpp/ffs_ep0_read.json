{"all_contexts":[
{"num_warnings": 6,
"context":[{"lineno": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}],
"warnings":[{"warn_data": {"at_line": 571, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "data = kmalloc(len, GFP_KERNEL);", "inst_trace": [{"instr_func": "ffs_ep0_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "ffs_ep0_read", "instr_loc": 503, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "{"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}], "at_file": "drivers/usb/gadget/function/f_fs.c", "by": "IntegerOverflowDetector says:", "at_func": "ffs_ep0_read"}, "warn_no": 1},
{"warn_data": {"at_line": 571, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "data = kmalloc(len, GFP_KERNEL);", "inst_trace": [{"instr_func": "ffs_ep0_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "ffs_ep0_read", "instr_loc": 503, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "{"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}], "at_file": "drivers/usb/gadget/function/f_fs.c", "by": "IntegerOverflowDetector says:", "at_func": "ffs_ep0_read"}, "warn_no": 2},
{"warn_data": {"at_line": 571, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "data = kmalloc(len, GFP_KERNEL);", "inst_trace": [{"instr_func": "ffs_ep0_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "ffs_ep0_read", "instr_loc": 503, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "{"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}], "at_file": "drivers/usb/gadget/function/f_fs.c", "by": "IntegerOverflowDetector says:", "at_func": "ffs_ep0_read"}, "warn_no": 3},
{"warn_data": {"at_line": 571, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "data = kmalloc(len, GFP_KERNEL);", "inst_trace": [{"instr_func": "ffs_ep0_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "ffs_ep0_read", "instr_loc": 503, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "{"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}], "at_file": "drivers/usb/gadget/function/f_fs.c", "by": "IntegerOverflowDetector says:", "at_func": "ffs_ep0_read"}, "warn_no": 4},
{"warn_data": {"at_line": 571, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "data = kmalloc(len, GFP_KERNEL);", "inst_trace": [{"instr_func": "ffs_ep0_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "ffs_ep0_read", "instr_loc": 503, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "{"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 571, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "data = kmalloc(len, GFP_KERNEL);"}], "at_file": "drivers/usb/gadget/function/f_fs.c", "by": "IntegerOverflowDetector says:", "at_func": "ffs_ep0_read"}, "warn_no": 5},
{"warn_data": {"at_line": 589, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if ((ret > 0) && (copy_to_user(buf, data, len)))", "inst_trace": [], "at_file": "drivers/usb/gadget/function/f_fs.c", "by": "TaintedSizeDetector says:", "at_func": "ffs_ep0_read"}, "warn_no": 6}]},
{"num_warnings": 3,
"context":[{"lineno": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"lineno": 556, "file": "drivers/usb/gadget/function/f_fs.c", "instr": "return __ffs_ep0_read_events(ffs, buf,"}],
"warnings":[{"warn_data": {"at_line": 490, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "ffs->ev.count -= n;", "inst_trace": [{"instr_func": "ffs_ep0_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "ffs_ep0_read", "instr_loc": 503, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "{"}, {"instr_func": "ffs_ep0_read", "instr_loc": 538, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "n = len / sizeof(struct usb_functionfs_event);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 538, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "n = len / sizeof(struct usb_functionfs_event);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 538, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "n = len / sizeof(struct usb_functionfs_event);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 556, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "return __ffs_ep0_read_events(ffs, buf,"}, {"instr_func": "__ffs_ep0_read_events", "instr_loc": 470, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "{"}, {"instr_func": "__ffs_ep0_read_events", "instr_loc": 490, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "ffs->ev.count -= n;"}], "at_file": "drivers/usb/gadget/function/f_fs.c", "by": "IntegerOverflowDetector says:", "at_func": "__ffs_ep0_read_events"}, "warn_no": 1},
{"warn_data": {"at_line": 488, "warn_str": "Loop is bounded by a tainted value.", "at": "} while (++i < n);", "inst_trace": [{"instr_func": "ffs_ep0_read", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "ffs_ep0_read", "instr_loc": 503, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "{"}, {"instr_func": "ffs_ep0_read", "instr_loc": 538, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "n = len / sizeof(struct usb_functionfs_event);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 538, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "n = len / sizeof(struct usb_functionfs_event);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 538, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "n = len / sizeof(struct usb_functionfs_event);"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 557, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "min(n, (size_t)ffs->ev.count));"}, {"instr_func": "ffs_ep0_read", "instr_loc": 556, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "return __ffs_ep0_read_events(ffs, buf,"}, {"instr_func": "__ffs_ep0_read_events", "instr_loc": 470, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "{"}, {"instr_func": "__ffs_ep0_read_events", "instr_loc": 488, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "} while (++i < n);"}, {"instr_func": "__ffs_ep0_read_events", "instr_loc": 488, "instr_file": "drivers/usb/gadget/function/f_fs.c", "instr": "} while (++i < n);"}], "at_file": "drivers/usb/gadget/function/f_fs.c", "by": "TaintedLoopBoundDetector says:", "at_func": "__ffs_ep0_read_events"}, "warn_no": 2},
{"warn_data": {"at_line": 495, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "spin_unlock_irq(&ffs->ev.waitq.lock);", "inst_trace": [], "at_file": "drivers/usb/gadget/function/f_fs.c", "by": "TaintedSizeDetector says:", "at_func": "__ffs_ep0_read_events"}, "warn_no": 3}]}]}