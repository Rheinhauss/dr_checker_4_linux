{"all_contexts":[
{"num_warnings": 9,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}],
"warnings":[{"warn_data": {"at_line": 626, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "if (count + 1 > PAGE_SIZE)", "inst_trace": [{"instr_func": "stm_char_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "stm_char_write", "instr_loc": 620, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "{"}, {"instr_func": "stm_char_write", "instr_loc": 626, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "if (count + 1 > PAGE_SIZE)"}], "at_file": "drivers/hwtracing/stm/core.c", "by": "IntegerOverflowDetector says:", "at_func": "stm_char_write"}, "warn_no": 1},
{"warn_data": {"at_line": 648, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "kbuf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "stm_char_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "stm_char_write", "instr_loc": 620, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "{"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "drivers/hwtracing/stm/core.c", "by": "IntegerOverflowDetector says:", "at_func": "stm_char_write"}, "warn_no": 2},
{"warn_data": {"at_line": 648, "warn_str": "Trying to use a global variable without locking.", "at": "kbuf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "stm_char_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}], "at_file": "drivers/hwtracing/stm/core.c", "by": "GlobalVariableRaceDetector says:", "at_func": "stm_char_write"}, "warn_no": 3},
{"warn_data": {"at_line": 648, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "kbuf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "stm_char_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "stm_char_write", "instr_loc": 620, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "{"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "drivers/hwtracing/stm/core.c", "by": "IntegerOverflowDetector says:", "at_func": "stm_char_write"}, "warn_no": 4},
{"warn_data": {"at_line": 648, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "kbuf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "stm_char_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "stm_char_write", "instr_loc": 620, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "{"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "drivers/hwtracing/stm/core.c", "by": "IntegerOverflowDetector says:", "at_func": "stm_char_write"}, "warn_no": 5},
{"warn_data": {"at_line": 648, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "kbuf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "stm_char_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "stm_char_write", "instr_loc": 620, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "{"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "drivers/hwtracing/stm/core.c", "by": "IntegerOverflowDetector says:", "at_func": "stm_char_write"}, "warn_no": 6},
{"warn_data": {"at_line": 648, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "kbuf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "stm_char_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "stm_char_write", "instr_loc": 620, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "{"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "drivers/hwtracing/stm/core.c", "by": "IntegerOverflowDetector says:", "at_func": "stm_char_write"}, "warn_no": 7},
{"warn_data": {"at_line": 648, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "kbuf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "stm_char_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "stm_char_write", "instr_loc": 620, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "{"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "stm_char_write", "instr_loc": 648, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "kbuf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "drivers/hwtracing/stm/core.c", "by": "IntegerOverflowDetector says:", "at_func": "stm_char_write"}, "warn_no": 8},
{"warn_data": {"at_line": 652, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "err = copy_from_user(kbuf, buf, count);", "inst_trace": [], "at_file": "drivers/hwtracing/stm/core.c", "by": "TaintedSizeDetector says:", "at_func": "stm_char_write"}, "warn_no": 9}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}, {"lineno": 639, "file": "drivers/hwtracing/stm/core.c", "instr": "err = stm_assign_first_policy(stmf->stm, &stmf->output, ids, 1);"}, {"lineno": 562, "file": "drivers/hwtracing/stm/core.c", "instr": "stp_policy_node_put(pn);"}],
"warnings":[{"warn_data": {"at_line": 554, "warn_str": "Trying to use a global variable without locking.", "at": "lockdep_assert_held(&stp_policy_subsys.su_mutex);", "inst_trace": [{"instr_func": "stm_char_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "stm_char_write", "instr_loc": 639, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "err = stm_assign_first_policy(stmf->stm, &stmf->output, ids, 1);"}, {"instr_func": "stm_assign_first_policy", "instr_loc": 562, "instr_file": "drivers/hwtracing/stm/core.c", "instr": "stp_policy_node_put(pn);"}], "at_file": "drivers/hwtracing/stm/policy.c", "by": "GlobalVariableRaceDetector says:", "at_func": "stp_policy_node_put"}, "warn_no": 1}]}]}