{"all_contexts":[
{"num_warnings": 15,
"context":[{"lineno": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}],
"warnings":[{"warn_data": {"at_line": 149, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "cookie_len = (count - 1) / 2;", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 1},
{"warn_data": {"at_line": 150, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "if ((count - 1) % 2)", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 150, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "if ((count - 1) % 2)"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 2},
{"warn_data": {"at_line": 152, "warn_str": "Trying to use a global variable without locking.", "at": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "GlobalVariableRaceDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 3},
{"warn_data": {"at_line": 152, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 4},
{"warn_data": {"at_line": 152, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 5},
{"warn_data": {"at_line": 152, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 6},
{"warn_data": {"at_line": 152, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 7},
{"warn_data": {"at_line": 152, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 152, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "buf = kmalloc(count, GFP_KERNEL | __GFP_NOWARN);"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 8},
{"warn_data": {"at_line": 156, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "ret = simple_write_to_buffer(buf, count, ppos, data, count);", "inst_trace": [], "at_file": "drivers/net/netdevsim/dev.c", "by": "TaintedSizeDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 9},
{"warn_data": {"at_line": 160, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 10},
{"warn_data": {"at_line": 160, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 11},
{"warn_data": {"at_line": 160, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 12},
{"warn_data": {"at_line": 160, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 13},
{"warn_data": {"at_line": 160, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 14},
{"warn_data": {"at_line": 160, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,", "inst_trace": [{"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 140, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "{"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 149, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "cookie_len = (count - 1) / 2;"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}, {"instr_func": "nsim_dev_trap_fa_cookie_write", "instr_loc": 160, "instr_file": "drivers/net/netdevsim/dev.c", "instr": "fa_cookie = kmalloc(sizeof(*fa_cookie) + cookie_len,"}], "at_file": "drivers/net/netdevsim/dev.c", "by": "IntegerOverflowDetector says:", "at_func": "nsim_dev_trap_fa_cookie_write"}, "warn_no": 15}]}]}