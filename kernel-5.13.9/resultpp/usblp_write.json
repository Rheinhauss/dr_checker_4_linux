{"all_contexts":[
{"num_warnings": 6,
"context":[{"lineno": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}],
"warnings":[{"warn_data": {"at_line": 761, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}], "at_file": "drivers/usb/class/usblp.c", "by": "IntegerOverflowDetector says:", "at_func": "usblp_write"}, "warn_no": 1},
{"warn_data": {"at_line": 757, "warn_str": "Loop is bounded by a tainted value.", "at": "while (writecount < count) {", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 757, "instr_file": "drivers/usb/class/usblp.c", "instr": "while (writecount < count) {"}, {"instr_func": "usblp_write", "instr_loc": 757, "instr_file": "drivers/usb/class/usblp.c", "instr": "while (writecount < count) {"}], "at_file": "drivers/usb/class/usblp.c", "by": "TaintedLoopBoundDetector says:", "at_func": "usblp_write"}, "warn_no": 2},
{"warn_data": {"at_line": 768, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "usb_anchor_urb(writeurb, &usblp->urbs);", "inst_trace": [], "at_file": "drivers/usb/class/usblp.c", "by": "TaintedSizeDetector says:", "at_func": "usblp_write"}, "warn_no": 3},
{"warn_data": {"at_line": 798, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "writecount += transfer_length;", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 798, "instr_file": "drivers/usb/class/usblp.c", "instr": "writecount += transfer_length;"}], "at_file": "drivers/usb/class/usblp.c", "by": "IntegerOverflowDetector says:", "at_func": "usblp_write"}, "warn_no": 4},
{"warn_data": {"at_line": 770, "warn_str": "Loop is bounded by a tainted value.", "at": "if (copy_from_user(writeurb->transfer_buffer,", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 771, "instr_file": "drivers/usb/class/usblp.c", "instr": "buffer + writecount, transfer_length)) {"}, {"instr_func": "usblp_write", "instr_loc": 771, "instr_file": "drivers/usb/class/usblp.c", "instr": "buffer + writecount, transfer_length)) {"}, {"instr_func": "usblp_write", "instr_loc": 768, "instr_file": "drivers/usb/class/usblp.c", "instr": "usb_anchor_urb(writeurb, &usblp->urbs);"}, {"instr_func": "usblp_write", "instr_loc": 768, "instr_file": "drivers/usb/class/usblp.c", "instr": "usb_anchor_urb(writeurb, &usblp->urbs);"}, {"instr_func": "usblp_write", "instr_loc": 770, "instr_file": "drivers/usb/class/usblp.c", "instr": "if (copy_from_user(writeurb->transfer_buffer,"}], "at_file": "drivers/usb/class/usblp.c", "by": "TaintedLoopBoundDetector says:", "at_func": "usblp_write"}, "warn_no": 5},
{"warn_data": {"at_line": 804, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "writecount += transfer_length;", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 804, "instr_file": "drivers/usb/class/usblp.c", "instr": "writecount += transfer_length;"}], "at_file": "drivers/usb/class/usblp.c", "by": "IntegerOverflowDetector says:", "at_func": "usblp_write"}, "warn_no": 6}]},
{"num_warnings": 5,
"context":[{"lineno": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"lineno": 765, "file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}],
"warnings":[{"warn_data": {"at_line": 720, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "{", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}], "at_file": "drivers/usb/class/usblp.c", "by": "IntegerOverflowDetector says:", "at_func": "usblp_new_writeurb"}, "warn_no": 1},
{"warn_data": {"at_line": 720, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "{", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}], "at_file": "drivers/usb/class/usblp.c", "by": "IntegerOverflowDetector says:", "at_func": "usblp_new_writeurb"}, "warn_no": 2},
{"warn_data": {"at_line": 720, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "{", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}], "at_file": "drivers/usb/class/usblp.c", "by": "IntegerOverflowDetector says:", "at_func": "usblp_new_writeurb"}, "warn_no": 3},
{"warn_data": {"at_line": 720, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "{", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}], "at_file": "drivers/usb/class/usblp.c", "by": "IntegerOverflowDetector says:", "at_func": "usblp_new_writeurb"}, "warn_no": 4},
{"warn_data": {"at_line": 720, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "{", "inst_trace": [{"instr_func": "usblp_write", "instr_loc": -1, "instr": "  %5 = alloca %struct.spinlock*, align 8"}, {"instr_func": "usblp_write", "instr_loc": 743, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 761, "instr_file": "drivers/usb/class/usblp.c", "instr": "if ((transfer_length = count - writecount) > USBLP_BUF_SIZE)"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_write", "instr_loc": 765, "instr_file": "drivers/usb/class/usblp.c", "instr": "writeurb = usblp_new_writeurb(usblp, transfer_length);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 724, "instr_file": "drivers/usb/class/usblp.c", "instr": "writebuf = kmalloc(transfer_length, GFP_KERNEL);"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}, {"instr_func": "usblp_new_writeurb", "instr_loc": 720, "instr_file": "drivers/usb/class/usblp.c", "instr": "{"}], "at_file": "drivers/usb/class/usblp.c", "by": "IntegerOverflowDetector says:", "at_func": "usblp_new_writeurb"}, "warn_no": 5}]}]}