{"all_contexts":[
{"num_warnings": 9,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}],
"warnings":[{"warn_data": {"at_line": 250, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "fei_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "fei_write", "instr_loc": 241, "instr_file": "kernel/fail_function.c", "instr": "{"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "kernel/fail_function.c", "by": "IntegerOverflowDetector says:", "at_func": "fei_write"}, "warn_no": 1},
{"warn_data": {"at_line": 250, "warn_str": "Trying to use a global variable without locking.", "at": "buf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "fei_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}], "at_file": "kernel/fail_function.c", "by": "GlobalVariableRaceDetector says:", "at_func": "fei_write"}, "warn_no": 2},
{"warn_data": {"at_line": 250, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "fei_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "fei_write", "instr_loc": 241, "instr_file": "kernel/fail_function.c", "instr": "{"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "kernel/fail_function.c", "by": "IntegerOverflowDetector says:", "at_func": "fei_write"}, "warn_no": 3},
{"warn_data": {"at_line": 250, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "fei_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "fei_write", "instr_loc": 241, "instr_file": "kernel/fail_function.c", "instr": "{"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "kernel/fail_function.c", "by": "IntegerOverflowDetector says:", "at_func": "fei_write"}, "warn_no": 4},
{"warn_data": {"at_line": 250, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "fei_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "fei_write", "instr_loc": 241, "instr_file": "kernel/fail_function.c", "instr": "{"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "kernel/fail_function.c", "by": "IntegerOverflowDetector says:", "at_func": "fei_write"}, "warn_no": 5},
{"warn_data": {"at_line": 250, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "fei_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "fei_write", "instr_loc": 241, "instr_file": "kernel/fail_function.c", "instr": "{"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "kernel/fail_function.c", "by": "IntegerOverflowDetector says:", "at_func": "fei_write"}, "warn_no": 6},
{"warn_data": {"at_line": 250, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "buf = kmalloc(count + 1, GFP_KERNEL);", "inst_trace": [{"instr_func": "fei_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "fei_write", "instr_loc": 241, "instr_file": "kernel/fail_function.c", "instr": "{"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}, {"instr_func": "fei_write", "instr_loc": 250, "instr_file": "kernel/fail_function.c", "instr": "buf = kmalloc(count + 1, GFP_KERNEL);"}], "at_file": "kernel/fail_function.c", "by": "IntegerOverflowDetector says:", "at_func": "fei_write"}, "warn_no": 7},
{"warn_data": {"at_line": 258, "warn_str": "Trying to write to a user pointer.", "at": "buf[count] = '\\0';", "inst_trace": [{"instr_func": "fei_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "fei_write", "instr_loc": 241, "instr_file": "kernel/fail_function.c", "instr": "{"}, {"instr_func": "fei_write", "instr_loc": 258, "instr_file": "kernel/fail_function.c", "instr": "buf[count] = '\\0';"}, {"instr_func": "fei_write", "instr_loc": 258, "instr_file": "kernel/fail_function.c", "instr": "buf[count] = '\\0';"}], "at_file": "kernel/fail_function.c", "by": "TaintedPointerDereferenceChecker says:", "at_func": "fei_write"}, "warn_no": 8},
{"warn_data": {"at_line": 254, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_from_user(buf, buffer, count)) {", "inst_trace": [], "at_file": "kernel/fail_function.c", "by": "TaintedSizeDetector says:", "at_func": "fei_write"}, "warn_no": 9}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}, {"lineno": 259, "file": "kernel/fail_function.c", "instr": "sym = strstrip(buf);"}],
"warnings":[{"warn_data": {"at_line": 79, "warn_str": "Tainted Data used in risky function", "at": "  %4 = call i8* @strim(i8* %3) #9, !dbg !4632", "inst_trace": [{"instr_func": "fei_write", "instr_loc": 254, "instr_file": "kernel/fail_function.c", "instr": "if (copy_from_user(buf, buffer, count)) {"}], "at_file": "./include/linux/string.h", "by": "ImproperTaintedDataUseDetector says:", "tainted_obj": "  %110 = call noalias i8* @kmalloc_order_trace(i64 %107, i32 %108, i32 %109) #12, !dbg !4781", "at_func": "strstrip"}, "warn_no": 1}]}]}