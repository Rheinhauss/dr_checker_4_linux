{"all_contexts":[
{"num_warnings": 7,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}],
"warnings":[{"warn_data": {"at_line": 168, "warn_str": "Loop is bounded by a tainted value.", "at": "if (seq->count >= size)", "inst_trace": [{"instr_func": "bpf_seq_read", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "bpf_seq_read", "instr_loc": 91, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "{"}, {"instr_func": "bpf_seq_read", "instr_loc": 168, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "if (seq->count >= size)"}, {"instr_func": "bpf_seq_read", "instr_loc": 168, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "if (seq->count >= size)"}], "at_file": "kernel/bpf/bpf_iter.c", "by": "TaintedLoopBoundDetector says:", "at_func": "bpf_seq_read"}, "warn_no": 1},
{"warn_data": {"at_line": 221, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "seq->count -= n;", "inst_trace": [{"instr_func": "bpf_seq_read", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "bpf_seq_read", "instr_loc": 91, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "{"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 221, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "seq->count -= n;"}], "at_file": "kernel/bpf/bpf_iter.c", "by": "IntegerOverflowDetector says:", "at_func": "bpf_seq_read"}, "warn_no": 2},
{"warn_data": {"at_line": 214, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "n = min(seq->count, size);", "inst_trace": [], "at_file": "kernel/bpf/bpf_iter.c", "by": "TaintedSizeDetector says:", "at_func": "bpf_seq_read"}, "warn_no": 3},
{"warn_data": {"at_line": 116, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "seq->count -= n;", "inst_trace": [{"instr_func": "bpf_seq_read", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "bpf_seq_read", "instr_loc": 91, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "{"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 116, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "seq->count -= n;"}], "at_file": "kernel/bpf/bpf_iter.c", "by": "IntegerOverflowDetector says:", "at_func": "bpf_seq_read"}, "warn_no": 4},
{"warn_data": {"at_line": 110, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "n = min(seq->count, size);", "inst_trace": [], "at_file": "kernel/bpf/bpf_iter.c", "by": "TaintedSizeDetector says:", "at_func": "bpf_seq_read"}, "warn_no": 5},
{"warn_data": {"at_line": 117, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "seq->from += n;", "inst_trace": [{"instr_func": "bpf_seq_read", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "bpf_seq_read", "instr_loc": 91, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "{"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 117, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "seq->from += n;"}], "at_file": "kernel/bpf/bpf_iter.c", "by": "IntegerOverflowDetector says:", "at_func": "bpf_seq_read"}, "warn_no": 6},
{"warn_data": {"at_line": 227, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "*ppos += copied;", "inst_trace": [{"instr_func": "bpf_seq_read", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "bpf_seq_read", "instr_loc": 91, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "{"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 214, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "n = min(seq->count, size);"}, {"instr_func": "bpf_seq_read", "instr_loc": 220, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "copied = n;"}, {"instr_func": "bpf_seq_read", "instr_loc": 220, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "copied = n;"}, {"instr_func": "bpf_seq_read", "instr_loc": 227, "instr_file": "kernel/bpf/bpf_iter.c", "instr": "*ppos += copied;"}], "at_file": "kernel/bpf/bpf_iter.c", "by": "IntegerOverflowDetector says:", "at_func": "bpf_seq_read"}, "warn_no": 7}]}]}