{"all_contexts":[
{"num_warnings": 6,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}],
"warnings":[{"warn_data": {"at_line": 262, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "count -= sz;", "inst_trace": [{"instr_func": "write_mem", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "write_mem", "instr_loc": 201, "instr_file": "drivers/char/mem.c", "instr": "{"}, {"instr_func": "write_mem", "instr_loc": 262, "instr_file": "drivers/char/mem.c", "instr": "count -= sz;"}], "at_file": "drivers/char/mem.c", "by": "IntegerOverflowDetector says:", "at_func": "write_mem"}, "warn_no": 1},
{"warn_data": {"at_line": 227, "warn_str": "Loop is bounded by a tainted value.", "at": "while (count > 0) {", "inst_trace": [{"instr_func": "write_mem", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "write_mem", "instr_loc": 201, "instr_file": "drivers/char/mem.c", "instr": "{"}, {"instr_func": "write_mem", "instr_loc": 227, "instr_file": "drivers/char/mem.c", "instr": "while (count > 0) {"}, {"instr_func": "write_mem", "instr_loc": 227, "instr_file": "drivers/char/mem.c", "instr": "while (count > 0) {"}], "at_file": "drivers/char/mem.c", "by": "TaintedLoopBoundDetector says:", "at_func": "write_mem"}, "warn_no": 2},
{"warn_data": {"at_line": 250, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "copied = copy_from_user(ptr, buf, sz);", "inst_trace": [], "at_file": "drivers/char/mem.c", "by": "TaintedSizeDetector says:", "at_func": "write_mem"}, "warn_no": 3},
{"warn_data": {"at_line": 253, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "written += sz - copied;", "inst_trace": [{"instr_func": "write_mem", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "write_mem", "instr_loc": 201, "instr_file": "drivers/char/mem.c", "instr": "{"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "size_inside_page", "instr_loc": 44, "instr_file": "drivers/char/mem.c", "instr": "{"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "write_mem", "instr_loc": 253, "instr_file": "drivers/char/mem.c", "instr": "written += sz - copied;"}, {"instr_func": "write_mem", "instr_loc": 253, "instr_file": "drivers/char/mem.c", "instr": "written += sz - copied;"}], "at_file": "drivers/char/mem.c", "by": "IntegerOverflowDetector says:", "at_func": "write_mem"}, "warn_no": 4},
{"warn_data": {"at_line": 253, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "written += sz - copied;", "inst_trace": [{"instr_func": "write_mem", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "write_mem", "instr_loc": 201, "instr_file": "drivers/char/mem.c", "instr": "{"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "size_inside_page", "instr_loc": 44, "instr_file": "drivers/char/mem.c", "instr": "{"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "write_mem", "instr_loc": 253, "instr_file": "drivers/char/mem.c", "instr": "written += sz - copied;"}], "at_file": "drivers/char/mem.c", "by": "IntegerOverflowDetector says:", "at_func": "write_mem"}, "warn_no": 5},
{"warn_data": {"at_line": 268, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "*ppos += written;", "inst_trace": [{"instr_func": "write_mem", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "write_mem", "instr_loc": 201, "instr_file": "drivers/char/mem.c", "instr": "{"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "size_inside_page", "instr_loc": 44, "instr_file": "drivers/char/mem.c", "instr": "{"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "size_inside_page", "instr_loc": 49, "instr_file": "drivers/char/mem.c", "instr": "return min(sz, size);"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "write_mem", "instr_loc": 230, "instr_file": "drivers/char/mem.c", "instr": "sz = size_inside_page(p, count);"}, {"instr_func": "write_mem", "instr_loc": 253, "instr_file": "drivers/char/mem.c", "instr": "written += sz - copied;"}, {"instr_func": "write_mem", "instr_loc": 253, "instr_file": "drivers/char/mem.c", "instr": "written += sz - copied;"}, {"instr_func": "write_mem", "instr_loc": 253, "instr_file": "drivers/char/mem.c", "instr": "written += sz - copied;"}, {"instr_func": "write_mem", "instr_loc": 253, "instr_file": "drivers/char/mem.c", "instr": "written += sz - copied;"}, {"instr_func": "write_mem", "instr_loc": 268, "instr_file": "drivers/char/mem.c", "instr": "*ppos += written;"}], "at_file": "drivers/char/mem.c", "by": "IntegerOverflowDetector says:", "at_func": "write_mem"}, "warn_no": 6}]}]}