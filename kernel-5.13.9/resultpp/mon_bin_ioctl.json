{"all_contexts":[
{"num_warnings": 2,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.spinlock*, align 8"}],
"warnings":[{"warn_data": {"at_line": 1082, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "struct mon_bin_mfetch mfetch;", "inst_trace": [], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedSizeDetector says:", "at_func": "mon_bin_ioctl"}, "warn_no": 1},
{"warn_data": {"at_line": 1066, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "struct mon_bin_get getb;", "inst_trace": [], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedSizeDetector says:", "at_func": "mon_bin_ioctl"}, "warn_no": 2}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.spinlock*, align 8"}, {"lineno": 1091, "file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_flush(rp, mfetch.nflush);"}],
"warnings":[{"warn_data": {"at_line": 880, "warn_str": "Loop is bounded by a tainted value.", "at": "for (i = 0; i < nevents; ++i) {", "inst_trace": [{"instr_func": "mon_bin_ioctl", "instr_loc": 1082, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "struct mon_bin_mfetch mfetch;"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1091, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_flush(rp, mfetch.nflush);"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1091, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_flush(rp, mfetch.nflush);"}, {"instr_func": "mon_bin_flush", "instr_loc": 873, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_flush", "instr_loc": 880, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "for (i = 0; i < nevents; ++i) {"}, {"instr_func": "mon_bin_flush", "instr_loc": 880, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "for (i = 0; i < nevents; ++i) {"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedLoopBoundDetector says:", "at_func": "mon_bin_flush"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.spinlock*, align 8"}, {"lineno": 1097, "file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_fetch(file, rp, mfetch.offvec, mfetch.nfetch);"}],
"warnings":[{"warn_data": {"at_line": 924, "warn_str": "Loop is bounded by a tainted value.", "at": "if (nevents >= max)", "inst_trace": [{"instr_func": "mon_bin_ioctl", "instr_loc": 1082, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "struct mon_bin_mfetch mfetch;"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1097, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_fetch(file, rp, mfetch.offvec, mfetch.nfetch);"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1097, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_fetch(file, rp, mfetch.offvec, mfetch.nfetch);"}, {"instr_func": "mon_bin_fetch", "instr_loc": 900, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_fetch", "instr_loc": 924, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (nevents >= max)"}, {"instr_func": "mon_bin_fetch", "instr_loc": 924, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (nevents >= max)"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedLoopBoundDetector says:", "at_func": "mon_bin_fetch"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.spinlock*, align 8"}, {"lineno": 1074, "file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_get_event(file, rp, getb.hdr,"}],
"warnings":[{"warn_data": {"at_line": 754, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "ep = MON_OFF2HDR(rp, rp->b_out);", "inst_trace": [], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedSizeDetector says:", "at_func": "mon_bin_get_event"}, "warn_no": 1}]},
{"num_warnings": 7,
"context":[{"lineno": -1, "instr": "  %4 = alloca %struct.spinlock*, align 8"}, {"lineno": 1074, "file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_get_event(file, rp, getb.hdr,"}, {"lineno": 764, "file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}],
"warnings":[{"warn_data": {"at_line": 285, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "length -= step_len;", "inst_trace": [{"instr_func": "mon_bin_ioctl", "instr_loc": 1066, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "struct mon_bin_get getb;"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1076, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "getb.data, (unsigned int)getb.alloc);"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1074, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_get_event(file, rp, getb.hdr,"}, {"instr_func": "mon_bin_get_event", "instr_loc": 740, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "copy_from_buf"}, "warn_no": 1},
{"warn_data": {"at_line": 268, "warn_str": "Loop is bounded by a tainted value.", "at": "while (length) {", "inst_trace": [{"instr_func": "mon_bin_ioctl", "instr_loc": 1066, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "struct mon_bin_get getb;"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1076, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "getb.data, (unsigned int)getb.alloc);"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1074, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_get_event(file, rp, getb.hdr,"}, {"instr_func": "mon_bin_get_event", "instr_loc": 740, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 268, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "while (length) {"}, {"instr_func": "copy_from_buf", "instr_loc": 268, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "while (length) {"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedLoopBoundDetector says:", "at_func": "copy_from_buf"}, "warn_no": 2},
{"warn_data": {"at_line": 283, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "if ((off += step_len) >= this->b_size) off = 0;", "inst_trace": [{"instr_func": "mon_bin_ioctl", "instr_loc": 1066, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "struct mon_bin_get getb;"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1076, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "getb.data, (unsigned int)getb.alloc);"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1074, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_get_event(file, rp, getb.hdr,"}, {"instr_func": "mon_bin_get_event", "instr_loc": 740, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "copy_from_buf"}, "warn_no": 3},
{"warn_data": {"at_line": 281, "warn_str": "Loop is bounded by a tainted value.", "at": "if (copy_to_user(to, buf, step_len))", "inst_trace": [{"instr_func": "mon_bin_ioctl", "instr_loc": 1066, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "struct mon_bin_get getb;"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1076, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "getb.data, (unsigned int)getb.alloc);"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1074, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_get_event(file, rp, getb.hdr,"}, {"instr_func": "mon_bin_get_event", "instr_loc": 740, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 281, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_to_user(to, buf, step_len))"}, {"instr_func": "copy_from_buf", "instr_loc": 281, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_to_user(to, buf, step_len))"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 281, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_to_user(to, buf, step_len))"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedLoopBoundDetector says:", "at_func": "copy_from_buf"}, "warn_no": 4},
{"warn_data": {"at_line": 280, "warn_str": "Trying to read from a user pointer.", "at": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;", "inst_trace": [{"instr_func": "mon_bin_ioctl", "instr_loc": 1066, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "struct mon_bin_get getb;"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1076, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "getb.data, (unsigned int)getb.alloc);"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1074, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_get_event(file, rp, getb.hdr,"}, {"instr_func": "mon_bin_get_event", "instr_loc": 740, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}, {"instr_func": "copy_from_buf", "instr_loc": 280, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedPointerDereferenceChecker says:", "at_func": "copy_from_buf"}, "warn_no": 5},
{"warn_data": {"at_line": 273, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "in_page = CHUNK_SIZE - (off & (CHUNK_SIZE-1));", "inst_trace": [{"instr_func": "mon_bin_ioctl", "instr_loc": 1066, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "struct mon_bin_get getb;"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1076, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "getb.data, (unsigned int)getb.alloc);"}, {"instr_func": "mon_bin_ioctl", "instr_loc": 1074, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "ret = mon_bin_get_event(file, rp, getb.hdr,"}, {"instr_func": "mon_bin_get_event", "instr_loc": 740, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 761, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = min(ep->len_cap, nbytes);"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "mon_bin_get_event", "instr_loc": 764, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if (copy_from_buf(rp, offset, data, step_len)) {"}, {"instr_func": "copy_from_buf", "instr_loc": 263, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "{"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}, {"instr_func": "copy_from_buf", "instr_loc": 285, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "length -= step_len;"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 272, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "step_len = length;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 283, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "if ((off += step_len) >= this->b_size) off = 0;"}, {"instr_func": "copy_from_buf", "instr_loc": 273, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "in_page = CHUNK_SIZE - (off & (CHUNK_SIZE-1));"}, {"instr_func": "copy_from_buf", "instr_loc": 273, "instr_file": "drivers/usb/mon/mon_bin.c", "instr": "in_page = CHUNK_SIZE - (off & (CHUNK_SIZE-1));"}], "at_file": "drivers/usb/mon/mon_bin.c", "by": "IntegerOverflowDetector says:", "at_func": "copy_from_buf"}, "warn_no": 6},
{"warn_data": {"at_line": 280, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "buf = this->b_vec[off / CHUNK_SIZE].ptr + off % CHUNK_SIZE;", "inst_trace": [], "at_file": "drivers/usb/mon/mon_bin.c", "by": "TaintedSizeDetector says:", "at_func": "copy_from_buf"}, "warn_no": 7}]}]}