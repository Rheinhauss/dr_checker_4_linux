{"all_contexts":[
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca i64, align 8"}],
"warnings":[{"warn_data": {"at_line": 336, "warn_str": "Trying to use a global variable without locking.", "at": "ret = acpi_parse_art(acpi_thermal_rel_handle, &count,", "inst_trace": [{"instr_func": "acpi_thermal_rel_ioctl", "instr_loc": -1, "instr": "  %4 = alloca i64, align 8"}], "at_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "by": "GlobalVariableRaceDetector says:", "at_func": "acpi_thermal_rel_ioctl"}, "warn_no": 1}]},
{"num_warnings": 2,
"context":[{"lineno": -1, "instr": "  %4 = alloca i64, align 8"}, {"lineno": 345, "file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "return fill_art(arg);"}],
"warnings":[{"warn_data": {"at_line": 238, "warn_str": "Trying to use a global variable without locking.", "at": "ret = acpi_parse_art(acpi_thermal_rel_handle, &count, &arts, false);", "inst_trace": [{"instr_func": "acpi_thermal_rel_ioctl", "instr_loc": -1, "instr": "  %4 = alloca i64, align 8"}, {"instr_func": "acpi_thermal_rel_ioctl", "instr_loc": 345, "instr_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "return fill_art(arg);"}], "at_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "by": "GlobalVariableRaceDetector says:", "at_func": "fill_art"}, "warn_no": 1},
{"warn_data": {"at_line": 257, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_to_user(ubuf, art_user, art_len))", "inst_trace": [], "at_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "by": "TaintedSizeDetector says:", "at_func": "fill_art"}, "warn_no": 2}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca i64, align 8"}, {"lineno": 345, "file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "return fill_art(arg);"}, {"lineno": 238, "file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "ret = acpi_parse_art(acpi_thermal_rel_handle, &count, &arts, false);"}, {"lineno": 172, "file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "arts = kcalloc(*art_count, sizeof(struct art), GFP_KERNEL);"}, {"lineno": 625, "file": "./include/linux/slab.h", "instr": "  %11 = call i8* @kmalloc_array(i64 %7, i64 %8, i32 %10) #12, !dbg !4906"}],
"warnings":[{"warn_data": {"at_line": 557, "warn_str": "Trying to use a global variable without locking.", "at": "  %278 = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %277, !dbg !5188", "inst_trace": [{"instr_func": "acpi_thermal_rel_ioctl", "instr_loc": -1, "instr": "  %4 = alloca i64, align 8"}, {"instr_func": "acpi_thermal_rel_ioctl", "instr_loc": 345, "instr_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "return fill_art(arg);"}, {"instr_func": "fill_art", "instr_loc": 238, "instr_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "ret = acpi_parse_art(acpi_thermal_rel_handle, &count, &arts, false);"}, {"instr_func": "acpi_parse_art", "instr_loc": 172, "instr_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "arts = kcalloc(*art_count, sizeof(struct art), GFP_KERNEL);"}, {"instr_func": "kcalloc", "instr_loc": 625, "instr_file": "./include/linux/slab.h", "instr": "  %11 = call i8* @kmalloc_array(i64 %7, i64 %8, i32 %10) #12, !dbg !4906"}], "at_file": "./include/linux/slab.h", "by": "GlobalVariableRaceDetector says:", "at_func": "kmalloc_array"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %4 = alloca i64, align 8"}, {"lineno": 345, "file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "return fill_art(arg);"}, {"lineno": 242, "file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "art_user = kzalloc(art_len, GFP_KERNEL);"}],
"warnings":[{"warn_data": {"at_line": 557, "warn_str": "Trying to use a global variable without locking.", "at": "  %234 = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %233, !dbg !5165", "inst_trace": [{"instr_func": "acpi_thermal_rel_ioctl", "instr_loc": -1, "instr": "  %4 = alloca i64, align 8"}, {"instr_func": "acpi_thermal_rel_ioctl", "instr_loc": 345, "instr_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "return fill_art(arg);"}, {"instr_func": "fill_art", "instr_loc": 242, "instr_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "art_user = kzalloc(art_len, GFP_KERNEL);"}], "at_file": "./include/linux/slab.h", "by": "GlobalVariableRaceDetector says:", "at_func": "kzalloc"}, "warn_no": 1}]},
{"num_warnings": 2,
"context":[{"lineno": -1, "instr": "  %4 = alloca i64, align 8"}, {"lineno": 327, "file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "return fill_trt(arg);"}],
"warnings":[{"warn_data": {"at_line": 274, "warn_str": "Trying to use a global variable without locking.", "at": "ret = acpi_parse_trt(acpi_thermal_rel_handle, &count, &trts, false);", "inst_trace": [{"instr_func": "acpi_thermal_rel_ioctl", "instr_loc": -1, "instr": "  %4 = alloca i64, align 8"}, {"instr_func": "acpi_thermal_rel_ioctl", "instr_loc": 327, "instr_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "instr": "return fill_trt(arg);"}], "at_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "by": "GlobalVariableRaceDetector says:", "at_func": "fill_trt"}, "warn_no": 1},
{"warn_data": {"at_line": 292, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_to_user(ubuf, trt_user, trt_len))", "inst_trace": [], "at_file": "drivers/thermal/intel/int340x_thermal/acpi_thermal_rel.c", "by": "TaintedSizeDetector says:", "at_func": "fill_trt"}, "warn_no": 2}]}]}