{"all_contexts":[
{"num_warnings": 6,
"context":[{"lineno": -1, "instr": "  %5 = alloca i1, align 1"}],
"warnings":[{"warn_data": {"at_line": 990, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "if (k + j > 255)", "inst_trace": [{"instr_func": "cmm_read", "instr_loc": -1, "instr": "  %5 = alloca i1, align 1"}, {"instr_func": "cmm_read", "instr_loc": 923, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "{"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 990, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "if (k + j > 255)"}], "at_file": "drivers/char/pcmcia/cm4000_cs.c", "by": "IntegerOverflowDetector says:", "at_func": "cmm_read"}, "warn_no": 1},
{"warn_data": {"at_line": 993, "warn_str": "Loop is bounded by a tainted value.", "at": "for (i = 0; i < j; i++) {", "inst_trace": [{"instr_func": "cmm_read", "instr_loc": -1, "instr": "  %5 = alloca i1, align 1"}, {"instr_func": "cmm_read", "instr_loc": 923, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "{"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 993, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "for (i = 0; i < j; i++) {"}, {"instr_func": "cmm_read", "instr_loc": 993, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "for (i = 0; i < j; i++) {"}], "at_file": "drivers/char/pcmcia/cm4000_cs.c", "by": "TaintedLoopBoundDetector says:", "at_func": "cmm_read"}, "warn_no": 2},
{"warn_data": {"at_line": 1012, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "j++;", "inst_trace": [{"instr_func": "cmm_read", "instr_loc": -1, "instr": "  %5 = alloca i1, align 1"}, {"instr_func": "cmm_read", "instr_loc": 923, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "{"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 1012, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j++;"}], "at_file": "drivers/char/pcmcia/cm4000_cs.c", "by": "IntegerOverflowDetector says:", "at_func": "cmm_read"}, "warn_no": 3},
{"warn_data": {"at_line": 998, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "if (k + j > 255) {", "inst_trace": [{"instr_func": "cmm_read", "instr_loc": -1, "instr": "  %5 = alloca i1, align 1"}, {"instr_func": "cmm_read", "instr_loc": 923, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "{"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 998, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "if (k + j > 255) {"}], "at_file": "drivers/char/pcmcia/cm4000_cs.c", "by": "IntegerOverflowDetector says:", "at_func": "cmm_read"}, "warn_no": 4},
{"warn_data": {"at_line": 1002, "warn_str": "Loop is bounded by a tainted value.", "at": "for (; i < j; i++) {", "inst_trace": [{"instr_func": "cmm_read", "instr_loc": -1, "instr": "  %5 = alloca i1, align 1"}, {"instr_func": "cmm_read", "instr_loc": 923, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "{"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 988, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "j = min(count, (size_t)(dev->rlen - dev->rpos));"}, {"instr_func": "cmm_read", "instr_loc": 1002, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "for (; i < j; i++) {"}, {"instr_func": "cmm_read", "instr_loc": 1002, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "for (; i < j; i++) {"}], "at_file": "drivers/char/pcmcia/cm4000_cs.c", "by": "TaintedLoopBoundDetector says:", "at_func": "cmm_read"}, "warn_no": 5},
{"warn_data": {"at_line": 1033, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "if (copy_to_user(buf, dev->rbuf, count))", "inst_trace": [], "at_file": "drivers/char/pcmcia/cm4000_cs.c", "by": "TaintedSizeDetector says:", "at_func": "cmm_read"}, "warn_no": 6}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i1, align 1"}, {"lineno": 1031, "file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "str_invert_revert(dev->rbuf, count);"}],
"warnings":[{"warn_data": {"at_line": 200, "warn_str": "Loop is bounded by a tainted value.", "at": "for (i = 0; i < len; i++)", "inst_trace": [{"instr_func": "cmm_read", "instr_loc": -1, "instr": "  %5 = alloca i1, align 1"}, {"instr_func": "cmm_read", "instr_loc": 923, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "{"}, {"instr_func": "cmm_read", "instr_loc": 1031, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "str_invert_revert(dev->rbuf, count);"}, {"instr_func": "cmm_read", "instr_loc": 1031, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "str_invert_revert(dev->rbuf, count);"}, {"instr_func": "str_invert_revert", "instr_loc": 197, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "{"}, {"instr_func": "str_invert_revert", "instr_loc": 200, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "for (i = 0; i < len; i++)"}, {"instr_func": "str_invert_revert", "instr_loc": 200, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "for (i = 0; i < len; i++)"}], "at_file": "drivers/char/pcmcia/cm4000_cs.c", "by": "TaintedLoopBoundDetector says:", "at_func": "str_invert_revert"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i1, align 1"}, {"lineno": 1031, "file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "str_invert_revert(dev->rbuf, count);"}, {"lineno": 201, "file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "b[i] = invert_revert(b[i]);"}, {"lineno": 193, "file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "return bitrev8(~ch);"}],
"warnings":[{"warn_data": {"at_line": 18, "warn_str": "Trying to use a global variable without locking.", "at": "  %5 = getelementptr [256 x i8], [256 x i8]* @byte_rev_table, i64 0, i64 %4, !dbg !81216", "inst_trace": [{"instr_func": "cmm_read", "instr_loc": -1, "instr": "  %5 = alloca i1, align 1"}, {"instr_func": "cmm_read", "instr_loc": 1031, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "str_invert_revert(dev->rbuf, count);"}, {"instr_func": "str_invert_revert", "instr_loc": 201, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "b[i] = invert_revert(b[i]);"}, {"instr_func": "invert_revert", "instr_loc": 193, "instr_file": "drivers/char/pcmcia/cm4000_cs.c", "instr": "return bitrev8(~ch);"}], "at_file": "./include/linux/bitrev.h", "by": "GlobalVariableRaceDetector says:", "at_func": "__bitrev8"}, "warn_no": 1}]}]}