{"all_contexts":[
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}],
"warnings":[{"warn_data": {"at_line": 497, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "memset(&einj, 0, sizeof(einj));", "inst_trace": [], "at_file": "drivers/pci/pcie/aer_inject.c", "by": "TaintedSizeDetector says:", "at_func": "aer_inject_write"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}, {"lineno": 501, "file": "drivers/pci/pcie/aer_inject.c", "instr": "ret = aer_inject(&einj);"}],
"warnings":[{"warn_data": {"at_line": 371, "warn_str": "Trying to use a global variable without locking.", "at": "if (aer_mask_override) {", "inst_trace": [{"instr_func": "aer_inject_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "aer_inject_write", "instr_loc": 501, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "ret = aer_inject(&einj);"}], "at_file": "drivers/pci/pcie/aer_inject.c", "by": "GlobalVariableRaceDetector says:", "at_func": "aer_inject"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}, {"lineno": 501, "file": "drivers/pci/pcie/aer_inject.c", "instr": "ret = aer_inject(&einj);"}, {"lineno": 332, "file": "drivers/pci/pcie/aer_inject.c", "instr": "dev = pci_get_domain_bus_and_slot(einj->domain, einj->bus, devfn);"}],
"warnings":[{"warn_data": {"at_line": 231, "warn_str": "Loop is bounded by a tainted value.", "at": "if (pci_domain_nr(dev->bus) == domain &&", "inst_trace": [{"instr_func": "aer_inject_write", "instr_loc": 497, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "memset(&einj, 0, sizeof(einj));"}, {"instr_func": "aer_inject", "instr_loc": 327, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "unsigned int devfn = PCI_DEVFN(einj->dev, einj->fn);"}, {"instr_func": "aer_inject", "instr_loc": 327, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "unsigned int devfn = PCI_DEVFN(einj->dev, einj->fn);"}, {"instr_func": "aer_inject", "instr_loc": 327, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "unsigned int devfn = PCI_DEVFN(einj->dev, einj->fn);"}, {"instr_func": "aer_inject", "instr_loc": 327, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "unsigned int devfn = PCI_DEVFN(einj->dev, einj->fn);"}, {"instr_func": "aer_inject", "instr_loc": 327, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "unsigned int devfn = PCI_DEVFN(einj->dev, einj->fn);"}, {"instr_func": "aer_inject", "instr_loc": 332, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "dev = pci_get_domain_bus_and_slot(einj->domain, einj->bus, devfn);"}, {"instr_func": "aer_inject", "instr_loc": 332, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "dev = pci_get_domain_bus_and_slot(einj->domain, einj->bus, devfn);"}, {"instr_func": "pci_get_domain_bus_and_slot", "instr_loc": 227, "instr_file": "drivers/pci/search.c", "instr": "{"}, {"instr_func": "pci_get_domain_bus_and_slot", "instr_loc": 232, "instr_file": "drivers/pci/search.c", "instr": "(dev->bus->number == bus && dev->devfn == devfn))"}, {"instr_func": "pci_get_domain_bus_and_slot", "instr_loc": 232, "instr_file": "drivers/pci/search.c", "instr": "(dev->bus->number == bus && dev->devfn == devfn))"}], "at_file": "drivers/pci/search.c", "by": "TaintedLoopBoundDetector says:", "at_func": "pci_get_domain_bus_and_slot"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}, {"lineno": 501, "file": "drivers/pci/pcie/aer_inject.c", "instr": "ret = aer_inject(&einj);"}, {"lineno": 360, "file": "drivers/pci/pcie/aer_inject.c", "instr": "err_alloc =  kzalloc(sizeof(struct aer_error), GFP_KERNEL);"}],
"warnings":[{"warn_data": {"at_line": 553, "warn_str": "Trying to use a global variable without locking.", "at": "  %183 = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %182, !dbg !672197", "inst_trace": [{"instr_func": "aer_inject_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "aer_inject_write", "instr_loc": 501, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "ret = aer_inject(&einj);"}, {"instr_func": "aer_inject", "instr_loc": 360, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "err_alloc =  kzalloc(sizeof(struct aer_error), GFP_KERNEL);"}], "at_file": "./include/linux/slab.h", "by": "GlobalVariableRaceDetector says:", "at_func": "kzalloc.244"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}, {"lineno": 501, "file": "drivers/pci/pcie/aer_inject.c", "instr": "ret = aer_inject(&einj);"}, {"lineno": 415, "file": "drivers/pci/pcie/aer_inject.c", "instr": "rperr = __find_aer_error_by_dev(rpdev);"}, {"lineno": 109, "file": "drivers/pci/pcie/aer_inject.c", "instr": "return __find_aer_error(domain, dev->bus->number, dev->devfn);"}],
"warnings":[{"warn_data": {"at_line": 95, "warn_str": "Loop is bounded by a tainted value.", "at": "if (domain == err->domain &&", "inst_trace": [{"instr_func": "aer_inject_write", "instr_loc": 497, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "memset(&einj, 0, sizeof(einj));"}, {"instr_func": "__find_aer_error", "instr_loc": 97, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "devfn == err->devfn)"}, {"instr_func": "__find_aer_error", "instr_loc": 97, "instr_file": "drivers/pci/pcie/aer_inject.c", "instr": "devfn == err->devfn)"}], "at_file": "drivers/pci/pcie/aer_inject.c", "by": "TaintedLoopBoundDetector says:", "at_func": "__find_aer_error"}, "warn_no": 1}]}]}