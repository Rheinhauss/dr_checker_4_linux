{"all_contexts":[
{"num_warnings": 3,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}],
"warnings":[{"warn_data": {"at_line": 280, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "err = add_keys(dev, c, var - ent->size);", "inst_trace": [{"instr_func": "size_write", "instr_loc": 266, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "count = min(count, sizeof(lbuf) - 1);"}, {"instr_func": "size_write", "instr_loc": 272, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "if (sscanf(lbuf, \"%u\", &var) != 1)"}, {"instr_func": "size_write", "instr_loc": 280, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "err = add_keys(dev, c, var - ent->size);"}], "at_file": "drivers/infiniband/hw/mlx5/mr.c", "by": "IntegerOverflowDetector says:", "at_func": "size_write"}, "warn_no": 1},
{"warn_data": {"at_line": 266, "warn_str": "Non-constant size used in copy_to(or from)_user function.", "at": "count = min(count, sizeof(lbuf) - 1);", "inst_trace": [], "at_file": "drivers/infiniband/hw/mlx5/mr.c", "by": "TaintedSizeDetector says:", "at_func": "size_write"}, "warn_no": 2},
{"warn_data": {"at_line": 287, "warn_str": "Potential overflow, using tainted value in binary operation.", "at": "remove_keys(dev, c, ent->size - var);", "inst_trace": [{"instr_func": "size_write", "instr_loc": 266, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "count = min(count, sizeof(lbuf) - 1);"}, {"instr_func": "size_write", "instr_loc": 272, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "if (sscanf(lbuf, \"%u\", &var) != 1)"}, {"instr_func": "size_write", "instr_loc": 287, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "remove_keys(dev, c, ent->size - var);"}], "at_file": "drivers/infiniband/hw/mlx5/mr.c", "by": "IntegerOverflowDetector says:", "at_func": "size_write"}, "warn_no": 3}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}, {"lineno": 287, "file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "remove_keys(dev, c, ent->size - var);"}],
"warnings":[{"warn_data": {"at_line": 233, "warn_str": "Loop is bounded by a tainted value.", "at": "for (i = 0; i < num; i++) {", "inst_trace": [{"instr_func": "size_write", "instr_loc": 266, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "count = min(count, sizeof(lbuf) - 1);"}, {"instr_func": "size_write", "instr_loc": 272, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "if (sscanf(lbuf, \"%u\", &var) != 1)"}, {"instr_func": "size_write", "instr_loc": 287, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "remove_keys(dev, c, ent->size - var);"}, {"instr_func": "size_write", "instr_loc": 287, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "remove_keys(dev, c, ent->size - var);"}, {"instr_func": "size_write", "instr_loc": 287, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "remove_keys(dev, c, ent->size - var);"}, {"instr_func": "remove_keys", "instr_loc": 225, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "{"}, {"instr_func": "remove_keys", "instr_loc": 233, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "for (i = 0; i < num; i++) {"}, {"instr_func": "remove_keys", "instr_loc": 233, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "for (i = 0; i < num; i++) {"}], "at_file": "drivers/infiniband/hw/mlx5/mr.c", "by": "TaintedLoopBoundDetector says:", "at_func": "remove_keys"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}, {"lineno": 280, "file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "err = add_keys(dev, c, var - ent->size);"}],
"warnings":[{"warn_data": {"at_line": 178, "warn_str": "Loop is bounded by a tainted value.", "at": "for (i = 0; i < num; i++) {", "inst_trace": [{"instr_func": "size_write", "instr_loc": 266, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "count = min(count, sizeof(lbuf) - 1);"}, {"instr_func": "size_write", "instr_loc": 272, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "if (sscanf(lbuf, \"%u\", &var) != 1)"}, {"instr_func": "size_write", "instr_loc": 280, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "err = add_keys(dev, c, var - ent->size);"}, {"instr_func": "size_write", "instr_loc": 280, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "err = add_keys(dev, c, var - ent->size);"}, {"instr_func": "size_write", "instr_loc": 280, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "err = add_keys(dev, c, var - ent->size);"}, {"instr_func": "add_keys", "instr_loc": 163, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "{"}, {"instr_func": "add_keys", "instr_loc": 178, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "for (i = 0; i < num; i++) {"}, {"instr_func": "add_keys", "instr_loc": 178, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "for (i = 0; i < num; i++) {"}], "at_file": "drivers/infiniband/hw/mlx5/mr.c", "by": "TaintedLoopBoundDetector says:", "at_func": "add_keys"}, "warn_no": 1}]},
{"num_warnings": 1,
"context":[{"lineno": -1, "instr": "  %5 = alloca i8*, align 8"}, {"lineno": 280, "file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "err = add_keys(dev, c, var - ent->size);"}, {"lineno": 173, "file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "in = kzalloc(inlen, GFP_KERNEL);"}],
"warnings":[{"warn_data": {"at_line": 553, "warn_str": "Trying to use a global variable without locking.", "at": "  %183 = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %182, !dbg !600672", "inst_trace": [{"instr_func": "size_write", "instr_loc": -1, "instr": "  %5 = alloca i8*, align 8"}, {"instr_func": "size_write", "instr_loc": 280, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "err = add_keys(dev, c, var - ent->size);"}, {"instr_func": "add_keys", "instr_loc": 173, "instr_file": "drivers/infiniband/hw/mlx5/mr.c", "instr": "in = kzalloc(inlen, GFP_KERNEL);"}], "at_file": "./include/linux/slab.h", "by": "GlobalVariableRaceDetector says:", "at_func": "kzalloc.1543"}, "warn_no": 1}]}]}